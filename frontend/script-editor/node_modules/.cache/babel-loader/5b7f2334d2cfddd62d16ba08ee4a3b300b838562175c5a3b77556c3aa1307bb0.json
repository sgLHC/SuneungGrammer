{"ast":null,"code":"// src/ActionProvider.js\nimport axios from \"axios\";\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n  async getAIResponse(message) {\n    try {\n      const result = await axios.post(\"https://api.openai.com/v1/chat/completions\", {\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"user\",\n          content: message\n        }],\n        max_tokens: 100\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer YOUR_OPENAI_API_KEY` // OpenAI API 키 추가\n        }\n      });\n      const botMessage = this.createChatBotMessage(result.data.choices[0].message.content);\n      this.setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, botMessage]\n      }));\n    } catch (error) {\n      console.error(\"OpenAI API 요청 실패:\", error);\n      const errorMessage = this.createChatBotMessage(\"응답을 가져오는 중 오류가 발생했습니다.\");\n      this.setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, errorMessage]\n      }));\n    }\n  }\n  greet() {\n    const message = this.createChatBotMessage(\"안녕하세요! 무엇을 도와드릴까요?\");\n    this.setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message]\n    }));\n  }\n}\nexport default ActionProvider;","map":{"version":3,"names":["axios","ActionProvider","constructor","createChatBotMessage","setStateFunc","setState","getAIResponse","message","result","post","model","messages","role","content","max_tokens","headers","Authorization","botMessage","data","choices","prev","error","console","errorMessage","greet"],"sources":["C:/Users/0730b/Documents/Dev/Projects/Sogang-LHC/script_editor/frontend/script-editor/src/ActionProvider.js"],"sourcesContent":["// src/ActionProvider.js\r\nimport axios from \"axios\";\r\n\r\nclass ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n  }\r\n\r\n  async getAIResponse(message) {\r\n    try {\r\n      const result = await axios.post(\r\n        \"https://api.openai.com/v1/chat/completions\",\r\n        {\r\n          model: \"gpt-3.5-turbo\",\r\n          messages: [{ role: \"user\", content: message }],\r\n          max_tokens: 100,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer YOUR_OPENAI_API_KEY`, // OpenAI API 키 추가\r\n          },\r\n        }\r\n      );\r\n\r\n      const botMessage = this.createChatBotMessage(result.data.choices[0].message.content);\r\n      this.setState((prev) => ({\r\n        ...prev,\r\n        messages: [...prev.messages, botMessage],\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"OpenAI API 요청 실패:\", error);\r\n      const errorMessage = this.createChatBotMessage(\"응답을 가져오는 중 오류가 발생했습니다.\");\r\n      this.setState((prev) => ({\r\n        ...prev,\r\n        messages: [...prev.messages, errorMessage],\r\n      }));\r\n    }\r\n  }\r\n\r\n  greet() {\r\n    const message = this.createChatBotMessage(\"안녕하세요! 무엇을 도와드릴까요?\");\r\n    this.setState((prev) => ({\r\n      ...prev,\r\n      messages: [...prev.messages, message],\r\n    }));\r\n  }\r\n}\r\n\r\nexport default ActionProvider;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,cAAc,CAAC;EACnBC,WAAWA,CAACC,oBAAoB,EAAEC,YAAY,EAAE;IAC9C,IAAI,CAACD,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACE,QAAQ,GAAGD,YAAY;EAC9B;EAEA,MAAME,aAAaA,CAACC,OAAO,EAAE;IAC3B,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMR,KAAK,CAACS,IAAI,CAC7B,4CAA4C,EAC5C;QACEC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEN;QAAQ,CAAC,CAAC;QAC9CO,UAAU,EAAE;MACd,CAAC,EACD;QACEC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,4BAA4B,CAAE;QAC/C;MACF,CACF,CAAC;MAED,MAAMC,UAAU,GAAG,IAAI,CAACd,oBAAoB,CAACK,MAAM,CAACU,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACZ,OAAO,CAACM,OAAO,CAAC;MACpF,IAAI,CAACR,QAAQ,CAAEe,IAAI,KAAM;QACvB,GAAGA,IAAI;QACPT,QAAQ,EAAE,CAAC,GAAGS,IAAI,CAACT,QAAQ,EAAEM,UAAU;MACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,MAAME,YAAY,GAAG,IAAI,CAACpB,oBAAoB,CAAC,wBAAwB,CAAC;MACxE,IAAI,CAACE,QAAQ,CAAEe,IAAI,KAAM;QACvB,GAAGA,IAAI;QACPT,QAAQ,EAAE,CAAC,GAAGS,IAAI,CAACT,QAAQ,EAAEY,YAAY;MAC3C,CAAC,CAAC,CAAC;IACL;EACF;EAEAC,KAAKA,CAAA,EAAG;IACN,MAAMjB,OAAO,GAAG,IAAI,CAACJ,oBAAoB,CAAC,oBAAoB,CAAC;IAC/D,IAAI,CAACE,QAAQ,CAAEe,IAAI,KAAM;MACvB,GAAGA,IAAI;MACPT,QAAQ,EAAE,CAAC,GAAGS,IAAI,CAACT,QAAQ,EAAEJ,OAAO;IACtC,CAAC,CAAC,CAAC;EACL;AACF;AAEA,eAAeN,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}