{"ast":null,"code":"// src/ActionProvider.js\nimport axios from \"axios\";\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n  async getAnswerFromAPI(question) {\n    try {\n      const token = localStorage.getItem(\"access_token\"); // 저장된 토큰 가져오기\n      console.log(token);\n      const response = await axios.post(\"http://localhost:8000/api/edit-script/\", {\n        question\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const answer = response.data.answer;\n      const explanation = response.data.explanation;\n\n      // 챗봇에 보여줄 응답 형식 설정\n      const botMessage = this.createChatBotMessage(`Answer: ${answer}\\nExplanation: ${explanation}`);\n\n      // 상태 업데이트하여 챗봇 메시지 표시\n      this.setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, botMessage]\n      }));\n    } catch (error) {\n      console.error(\"API 요청 중 오류 발생:\", error);\n      const errorMessage = this.createChatBotMessage(\"죄송합니다. 응답을 가져오는 중 오류가 발생했습니다.\");\n      this.setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, errorMessage]\n      }));\n    }\n  }\n}\nexport default ActionProvider;","map":{"version":3,"names":["axios","ActionProvider","constructor","createChatBotMessage","setStateFunc","setState","getAnswerFromAPI","question","token","localStorage","getItem","console","log","response","post","headers","Authorization","answer","data","explanation","botMessage","prev","messages","error","errorMessage"],"sources":["C:/Users/0730b/Documents/Dev/Projects/Sogang-LHC/script_editor/frontend/script-editor/src/ActionProvider.js"],"sourcesContent":["// src/ActionProvider.js\r\nimport axios from \"axios\";\r\n\r\nclass ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n  }\r\n\r\n  async getAnswerFromAPI(question) {\r\n    try {\r\n      const token = localStorage.getItem(\"access_token\");  // 저장된 토큰 가져오기\r\n      console.log(token);\r\n      const response = await axios.post(\r\n        \"http://localhost:8000/api/edit-script/\",\r\n        { question },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const answer = response.data.answer;\r\n      const explanation = response.data.explanation;\r\n\r\n      // 챗봇에 보여줄 응답 형식 설정\r\n      const botMessage = this.createChatBotMessage(`Answer: ${answer}\\nExplanation: ${explanation}`);\r\n      \r\n      // 상태 업데이트하여 챗봇 메시지 표시\r\n      this.setState((prev) => ({\r\n        ...prev,\r\n        messages: [...prev.messages, botMessage],\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"API 요청 중 오류 발생:\", error);\r\n      const errorMessage = this.createChatBotMessage(\"죄송합니다. 응답을 가져오는 중 오류가 발생했습니다.\");\r\n      this.setState((prev) => ({\r\n        ...prev,\r\n        messages: [...prev.messages, errorMessage],\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\nexport default ActionProvider;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,cAAc,CAAC;EACnBC,WAAWA,CAACC,oBAAoB,EAAEC,YAAY,EAAE;IAC9C,IAAI,CAACD,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACE,QAAQ,GAAGD,YAAY;EAC9B;EAEA,MAAME,gBAAgBA,CAACC,QAAQ,EAAE;IAC/B,IAAI;MACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAE;MACrDC,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;MAClB,MAAMK,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAC/B,wCAAwC,EACxC;QAAEP;MAAS,CAAC,EACZ;QACEQ,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUR,KAAK;QAChC;MACF,CACF,CAAC;MAED,MAAMS,MAAM,GAAGJ,QAAQ,CAACK,IAAI,CAACD,MAAM;MACnC,MAAME,WAAW,GAAGN,QAAQ,CAACK,IAAI,CAACC,WAAW;;MAE7C;MACA,MAAMC,UAAU,GAAG,IAAI,CAACjB,oBAAoB,CAAC,WAAWc,MAAM,kBAAkBE,WAAW,EAAE,CAAC;;MAE9F;MACA,IAAI,CAACd,QAAQ,CAAEgB,IAAI,KAAM;QACvB,GAAGA,IAAI;QACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEF,UAAU;MACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,MAAMC,YAAY,GAAG,IAAI,CAACrB,oBAAoB,CAAC,+BAA+B,CAAC;MAC/E,IAAI,CAACE,QAAQ,CAAEgB,IAAI,KAAM;QACvB,GAAGA,IAAI;QACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEE,YAAY;MAC3C,CAAC,CAAC,CAAC;IACL;EACF;AACF;AAEA,eAAevB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}